import 'package:flutter/material.dart';
// Amplify Flutter Packages
import 'package:amplify_auth_cognito/amplify_auth_cognito.dart';
import 'package:amplify_authenticator/amplify_authenticator.dart';
import 'package:amplify_flutter/amplify_flutter.dart';
import 'package:amplify_api/amplify_api.dart';
import './models/ModelProvider.dart';
import 'dart:async';

// Generated in previous step
import 'amplifyconfiguration.dart';

void main() {
  runApp(const MainApp());
}

class MainApp extends StatefulWidget {
  const MainApp({super.key});

  @override
  State<MainApp> createState() => _MainAppState();
}

class _MainAppState extends State<MainApp> {
  List<Item?> allTodos = [];
  StreamSubscription<GraphQLResponse<Todo>>? subscription;

  SubscriptionStatus prevSubscriptionStatus = SubscriptionStatus.disconnected;

  @override
  initState() {
    super.initState();
    _configureAmplify();
  }

  Future<void> _configureAmplify() async {
    final apiPlugin = AmplifyAPI(
      modelProvider: ModelProvider.instance,
      subscriptionOptions: const GraphQLSubscriptionOptions(
        retryOptions: RetryOptions(maxAttempts: 10),
      ),
    );
    await Amplify.addPlugins([apiPlugin, AmplifyAuthCognito()]);

    try {
      await Amplify.configure(amplifyconfig);
    } on AmplifyAlreadyConfiguredException {
      safePrint(
          "Tried to reconfigure Amplify; this can occur when your app restarts on Android.");
    }

    // Init listeners
    Amplify.Hub.listen(
      HubChannel.Api,
      (ApiHubEvent event) {
        if (event is SubscriptionHubEvent) {
          if (prevSubscriptionStatus == SubscriptionStatus.connecting &&
              event.status == SubscriptionStatus.connected) {
            getTodos(); // refetch todos
          }
          prevSubscriptionStatus = event.status;
        }
      },
    );

    await subscribe();
  }

  Future<void> getTodos() async {
    try {
      final authSession =
          await Amplify.Auth.fetchAuthSession() as CognitoAuthSession;
      final token = authSession.userPoolTokensResult.value.idToken.raw;

      final request = ModelQueries.list(
        Todo.classType,
        headers: {'authorization': token},
      );
      final response = await Amplify.API.query(request: request).response;

      final todos = response.data?.items ?? [];
      if (response.errors.isNotEmpty) {
        safePrint('errors: ${response.errors}');
      }

      setState(() {
        allTodos = todos;
      });
    } on ApiException catch (e) {
      safePrint('Query failed: $e');
      return;
    }
  }

  Future<void> createTodo() async {
    try {
      final authSession =
          await Amplify.Auth.fetchAuthSession() as CognitoAuthSession;
      final token = authSession.userPoolTokensResult.value.idToken.raw;

      final todo =
          Todo(name: 'Todo: ${uuid()}', description: 'sample description');

      final request = ModelMutations.create(
        todo,
        headers: {'authorization': token},
      );

      final response = await Amplify.API.mutate(request: request).response;

      final createdTodo = response.data;
      if (createdTodo == null) {
        safePrint('errors: ${response.errors}');
        return;
      }
      safePrint('Mutation result: ${createdTodo.name}');
    } on ApiException catch (e) {
      safePrint('Mutation failed: $e');
    }
  }

  Future<void> subscribe() async {
    final authSession =
        await Amplify.Auth.fetchAuthSession() as CognitoAuthSession;
    final token = authSession.userPoolTokensResult.value.idToken.raw;

    final req = ModelSubscriptions.onCreate(
      Todo.classType,
      headers: {'authorization': token},
    );
    print(req.document);
    final subscriptionRequest = GraphQLRequest<Todo>(
      document:
          'subscription onCreateTodo { onCreateTodo { id name description createdAt updatedAt owner } }',
      variables: req.variables,
      decodePath: req.decodePath,
      modelType: req.modelType,
      headers: {'authorization': token},
    );

    final Stream<GraphQLResponse<Todo>> operation = Amplify.API.subscribe(
      subscriptionRequest,
      onEstablished: () => safePrint('Subscription established'),
    );
    subscription = operation.listen(
      (event) {
        setState(() {
          allTodos.add(event.data);
        });
      },
      onError: (Object e) => safePrint('Error in subscription stream: $e'),
    );
  }

  void unsubscribe() {
    subscription?.cancel();
    subscription = null;
  }

  @override
  Widget build(BuildContext context) {
    return Authenticator(
      child: MaterialApp(
        builder: Authenticator.builder(),
        home: Scaffold(
          appBar: AppBar(
            title: const Text('API Playground'),
            backgroundColor: Colors.amber,
          ),
          body: TodoWidget(todos: allTodos),
          floatingActionButton: FloatingActionButton(
            onPressed: createTodo,
            backgroundColor: Colors.green,
            child: const Icon(Icons.add),
          ),
        ),
      ),
    );
  }
}

class TodoWidget extends StatelessWidget {
  final List<Todo?> todos;

  TodoWidget({super.key, required this.todos});

  @override
  Widget build(BuildContext context) {
    print(todos);
    return ListView.builder(
      itemCount: todos.length,
      itemBuilder: (context, index) {
        return ListTile(
          title: Text(todos[index]?.name ?? ''),
          subtitle: Text(todos[index]?.description ?? ''),
        );
      },
    );
  }
}
